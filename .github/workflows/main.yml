name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Variables configurables para Docker
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_IMAGE: cache-service
  # Variables para AWS
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  # Variables para SonarCloud
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

jobs:
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code style
        run: |
          npm run format:check
          npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Check for vulnerabilities
        run: npm audit

      - name: Run tests with coverage
        run: npm run test:cov

      - name: Generate test report
        run: npm run test:report
        continue-on-error: true

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.qualitygate.wait=true

      - name: Check Quality Gate
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}" | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate failed"
            exit 1
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Cache Service'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired

  build:
    name: Build & Push Docker
    needs: [quality, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$DOCKER_IMAGE:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$DOCKER_IMAGE:$IMAGE_TAG
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag $ECR_REGISTRY/$DOCKER_IMAGE:$IMAGE_TAG $ECR_REGISTRY/$DOCKER_IMAGE:latest
            docker push $ECR_REGISTRY/$DOCKER_IMAGE:latest
          fi

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy to K8s
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Actualizar las variables de entorno en el ConfigMap
          kubectl apply -f k8s/configmap.yaml
          # Actualizar los secretos
          kubectl apply -f k8s/secrets.yaml
          # Aplicar el deployment
          kubectl apply -f k8s/deployment.yaml
          # Aplicar el servicio
          kubectl apply -f k8s/service.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/cache-service
          kubectl get pods -l app=cache-service 